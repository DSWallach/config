"turn on syntax highlighting
syntax on

" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader=","

" Easy Motion default
map <Leader> <Plug>(easymotion-prefix)

colo desert

" Plugin management
call plug#begin()
Plug 'christoomey/vim-tmux-navigator'
Plug 'ncm2/ncm2'
Plug 'vim-scripts/YankRing.vim'
Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --no-key-bindings --no-update-rc --completion' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'lervag/vimtex'
Plug 'terryma/vim-multiple-cursors'

" Don't load cause Minerva's Vim is super old
if (hostname() == 'localhost.localdomain')
    Plug 'Valloric/YouCompleteMe'
endif
call plug#end()


" Tmux Navigation
" Don't allow any default key-mappings.
let g:tmux_navigator_no_mappings = 1

" Re-enable tmux_navigator.vim default bindings, minus <c-\>.
" <c-\> conflicts with NERDTree "current file".

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

" SETtings
set ttimeout
set timeoutlen=1000
set ttimeoutlen=0
set background=dark
set foldmethod=indent
set foldlevelstart=0
set tabstop=2
set softtabstop=0
set shiftwidth=4
set expandtab
set smarttab
set nowrap
set number
set listchars=tab:>>,trail:~,extends:>,precedes:<
set list

"---------- FUNCTIONS -----------"
" Function for trimming whitespace
fun! TrimWhiteSpace()
  let l:save = winsaveview()
  %s/\s\+$//e
  call winrestview(l:save)
endfun

" Custom
map <silent> <F12> :call TrimWhiteSpace()<cr>
cmap w!! w !sudo tee > /dev/null %

" Function for switch a buffer to a existing tab
function MoveToPrevTab()
    " There is only one window
    if tabpagenr('$') == 1 && winnr('$') == 1
        return
    endif
    " Prepare a new window
    let l:tab_nr = tabpagenr('$')
    let l:cur_buf = bufnr('%')
    if tabpagenr() != 1
        close!
        if l:tab_nr == tabpagenr('$')
            tabprev
        endif
        sp
    else
        close!
        exe "0tabnew"
    endif
    " Opening current buffer in new window
    exe "b" .l:cur_buf
endfunc

function MoveToNextTab()
    " There is only one window
    if tabpagenr('$') == 1 && winnr('$') == 1
        return
    endif
    " Prepare new window
    let l:tab_nr = tabpagenr('$')
    let l:cur_buf = bufnr('%')
    if tabpagenr() < tab_nr
        close!
        if l:tab_nr == tabpagenr('$')
            tabnext
        endif
        sp
    else
        close!
        tabnew
    endif
    " Opening current buffer in new window
    exe "b" .l:cur_buf
endfunc

" Custom Mappings keys
nnoremap <A-.> :call MoveToNextTab()<CR>
nnoremap <A-,> :call MoveToPrevTab()<CR>
nnoremap H gT
nnoremap L gt
nnoremap K :YcmCompleter GetDoc<CR>

"" Python Plugin Settings
if (hostname() == 'localhost.localdomain')
    let g:pymode_python='python3'
endif
let g:pymode_options_max_line_length=120
let g:pymode_lint_options_pep8 =
    \ {'max_line_length': g:pymode_options_max_line_length}
let g:pymode_doc_bind='B'

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsListSnippets = '<c-g>'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" CtrlP file finding
let g:ctrlp_custom_ignore = '\v[\/](build|__pycache__|git|htmlcov)|(\.(swp|git))$'
let g:ctrlp_map = '<c-u>'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

" Filetypes
au BufNewFile,BufRead *.tsv		setf tsv
